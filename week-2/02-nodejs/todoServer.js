/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
*/

const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');

const app = express();
app.use(bodyParser.json());

const filePath = './todos.json';

const readFile = () => {
  return new Promise((resolve, reject) => {
    fs.readFile(filePath, 'utf-8', (err, data) => {
      if (err) reject(err);
      const res = JSON.parse(data);
      resolve(res);
    });
  })
}

const writeFile = (data) => {
  return new Promise ((resolve, reject) => {
    fs.writeFile (filePath, data, (err) => {
      if (err) reject (err);
      resolve();
    })
  })
}

app.get('/todos', async (req, res) => {
  try {
    const { todos } = await readFile();
    res.status(200).json(todos);
  }
  catch (err) {
    res.status(500).json();
  }
})

app.get('/todos/:id', async (req, res) => {
  try {
    const { todos } = await readFile();
    const todo = todos.find(t => t.id == req.params.id);

    if (!todo) {
      res.status(404).json({});
      return;
    }

    res.status(200).json(todo);
  }
  catch (err) {
    res.status(500).json();
  }
})

app.post('/todos', async (req, res) => {
  try {
    let { todos, cnt } = await readFile();

    todos.push({
      title: req.body.title,
      description: req.body.description,
      id: ++cnt
    });

    await writeFile(JSON.stringify({cnt, todos}));
    res.status(201).json({ id: cnt });
  }
  catch (err) {
    res.status(500).json();
  }
})

app.put('/todos/:id', async (req, res) => {
  try {
    const { todos, cnt } = await readFile();
    const idx = todos.findIndex(t => t.id == req.params.id);

    if (idx === -1) {
      res.status(404).json({});
      return;
    }

    todos[idx].title = req.body.title;
    todos[idx].description = req.body.description;

    await writeFile(JSON.stringify({cnt, todos}));
    res.status(200).json({});
  }
  catch (err) {
    res.status(500).json();
  }
})

app.delete('/todos/:id', async (req, res) => {
  try {
    const { todos, cnt } = await readFile();
    const idx = todos.findIndex(t => t.id == req.params.id);

    if (idx === -1) {
      res.status(404).json({});
      return;
    }

    todos.splice(idx, 1);
    
    await writeFile(JSON.stringify({cnt, todos}));
    res.status(200).json({});
  }
  catch (err) {
    res.status(500).json();
  }
})

module.exports = app;